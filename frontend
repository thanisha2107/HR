<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>HR Management System</title>
    <style>
        body { font-family: sans-serif; margin: 20px; background-color: #f4f4f4; }
        .container { max-width: 900px; margin: auto; background: white; padding: 20px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }
        h1, h2 { color: #333; }
        .form-group { margin-bottom: 15px; }
        label { display: block; margin-bottom: 5px; font-weight: bold; }
        input[type="text"] { width: 100%; padding: 8px; box-sizing: border-box; }
        button { padding: 10px 15px; background-color: #007bff; color: white; border: none; cursor: pointer; }
        button:hover { background-color: #0056b3; }
        .employee-list { margin-top: 20px; }
        table { width: 100%; border-collapse: collapse; margin-top: 10px; }
        th, td { border: 1px solid #ddd; padding: 10px; text-align: left; }
        th { background-color: #f2f2f2; }
        .action-buttons button { margin-right: 5px; }
    </style>
</head>
<body>

<div class="container">
    <h1>HR Management System</h1>

    <h2>Add New Employee</h2>
    <form id="create-form">
        <div class="form-group">
            <label for="first_name">First Name:</label>
            <input type="text" id="first_name" required>
        </div>
        <div class="form-group">
            <label for="last_name">Last Name:</label>
            <input type="text" id="last_name" required>
        </div>
        <div class="form-group">
            <label for="email">Email:</label>
            <input type="text" id="email" required>
        </div>
        <button type="submit">Add Employee</button>
    </form>

    <hr>

    <h2>Employee List</h2>
    <div class="employee-list">
        <table>
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="employee-table-body">
                </tbody>
        </table>
    </div>
</div>

<script>
    const API_URL = 'http://127.0.0.1:5000';

    // Helper function to fetch and display all employees
    async function fetchEmployees() {
        try {
            const response = await fetch(`${API_URL}/employees`);
            if (!response.ok) throw new Error('Failed to fetch employees');
            const employees = await response.json();
            const tableBody = document.getElementById('employee-table-body');
            tableBody.innerHTML = '';
            employees.forEach(emp => {
                const row = `
                    <tr>
                        <td>${emp.employee_id}</td>
                        <td>${emp.first_name} ${emp.last_name}</td>
                        <td>${emp.email}</td>
                        <td class="action-buttons">
                            <button onclick="updateEmployee(${emp.employee_id}, '${emp.first_name}', '${emp.last_name}', '${emp.email}')">Update</button>
                            <button onclick="deleteEmployee(${emp.employee_id})">Delete</button>
                        </td>
                    </tr>
                `;
                tableBody.innerHTML += row;
            });
        } catch (error) {
            console.error('Error:', error);
            alert('Error fetching employees. Check the backend server.');
        }
    }

    // CREATE Employee
    document.getElementById('create-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        const data = {
            first_name: document.getElementById('first_name').value,
            last_name: document.getElementById('last_name').value,
            email: document.getElementById('email').value,
        };
        try {
            const response = await fetch(`${API_URL}/employees`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });
            const result = await response.json();
            if (!response.ok) throw new Error(result.error);
            alert('Employee created successfully!');
            e.target.reset();
            fetchEmployees();
        } catch (error) {
            console.error('Error:', error);
            alert('Failed to create employee. Details: ' + error.message);
        }
    });

    // UPDATE Employee
    async function updateEmployee(id, firstName, lastName, email) {
        const newFirstName = prompt("Enter new first name:", firstName);
        const newLastName = prompt("Enter new last name:", lastName);
        const newEmail = prompt("Enter new email:", email);
        if (newFirstName === null || newLastName === null || newEmail === null) return; // User cancelled

        const data = {
            first_name: newFirstName,
            last_name: newLastName,
            email: newEmail
        };

        try {
            const response = await fetch(`${API_URL}/employees/${id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });
            const result = await response.json();
            if (!response.ok) throw new Error(result.error);
            alert('Employee updated successfully!');
            fetchEmployees();
        } catch (error) {
            console.error('Error:', error);
            alert('Failed to update employee. Details: ' + error.message);
        }
    }

    // DELETE Employee
    async function deleteEmployee(id) {
        if (!confirm("Are you sure you want to delete this employee?")) return;
        try {
            const response = await fetch(`${API_URL}/employees/${id}`, { method: 'DELETE' });
            const result = await response.json();
            if (!response.ok) throw new Error(result.error);
            alert('Employee deleted successfully!');
            fetchEmployees();
        } catch (error) {
            console.error('Error:', error);
            alert('Failed to delete employee. Details: ' + error.message);
        }
    }

    // Load initial data when the page loads
    window.onload = fetchEmployees;
</script>

</body>
</html>
